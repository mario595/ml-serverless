# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: merge-lock-queue-service

provider:
  profile: ml-serverless
  name: aws
  runtime: python2.7
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "dynamodb:*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "lambda:*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip
resources:
  Resources:
    userEventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'merge-lock'
    eventsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: timestamp
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: 'events'

functions:
  add:
    handler: handler.add
    events:
      - http:
          path: mergelock/add/
          method: post
          integration: lambda
  
  list:
    handler: handler.list
    events:
      - http:
          path: mergelock/list
          method: get
          integration: lambda
  
  listDispatcher:
    handler: handler.list_dispatcher
    events:
      - sns: listQueueRequest

  remove:
    handler: handler.remove
    events:
      - http:
          path: mergelock/remove/
          method: post
          integration: lambda
  
  pop:
    handler: handler.pop
    events:
      - http:
          path: mergelock/pop
          method: get
          integration: lambda
  
  dispatcher:
    handler: handler.dispatcher
    events:
      #TODO: Find the way to make this dynamic
      - stream: arn:aws:dynamodb:eu-west-1:015754386147:table/events/stream/2016-10-23T17:25:21.442


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

